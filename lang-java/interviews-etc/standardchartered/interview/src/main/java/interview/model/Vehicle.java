package interview.model;

import interview.service.HireRecord;
import org.apache.log4j.Logger;
import org.joda.time.DateTime;

/**
 * Abstract base class for concrete 'hireable' vehicle types.
 * This class has been created to correct the 'Bike extends Car'
 * flaw in the existing model.
 * (Note I have NOT created a Vehicle interface and VehicleImpl class just
 * for simplicity here)
 *
 * Changes:
 * 1. Tidy up imports.
 * 2. Make all members private and add accessors.
 * 3. reg is implemented as a more typesafe VehicleReg class
 * (clients now have no way of getting the ordering of the 'reg' and 'make' params the wrong way around).
 * 4. age member is removed (it was not being used) and its evaluation is delegated
 * to the VehicleReg class which is the right place to do this given that age is being determined
 * by the registration plate.
 *
 * Consider adding toString(), equals() and hashCode() methods as good practice
 * I am not doing this here in order to not clutter the code but these methods
 * are easily auto-generated by the IDE.
 *
 * Also should 'category' be an enum? It feels like it should but I don't know its values (is it needed)???
 */
public abstract class Vehicle {
    static Logger log = Logger.getLogger(Vehicle.class.getName());

    private String make;
    private VehicleReg reg;
    private int category;

    // There is an alternate design where the three members below are actually
    // modelled in the HireRecord class however I would need to know more about
    // the database schema to know if this was possible.
    private boolean hired; // could actually be derived from hireEnd date?
    private DateTime hireEnd;
    private long hireNumber;

    // From the interface implied by DbService, I would suspect that this class
    // needs a default ctr but I would want to ask!
    // I think it would probably need accompanying set methods for all the member data.

    public Vehicle(VehicleReg reg) {
        this.reg = reg;
    }

    public Vehicle(VehicleReg reg, String make, int category) {
        this.make = make;
        this.reg = reg;
        this.category = category;
    }

    public String getMake() {
        return make;
    }

    public int getCategory() {
        return category;
    }

    public String getReg() {
        return reg.getRegString();
    }

    public boolean isHired() {
        return hired;
    }

    public DateTime getHireEnd() {
        return hireEnd;
    }

    public long getHireNumber() {
        return hireNumber;
    }

    public int getAge() {
        return reg.getAge();
    }

    public void hire(HireRecord record)
    {
        log.debug("hire() called");

        hireEnd = new DateTime(record.getStartDate()).plusDays(record.getDays());
        hireNumber = record.getHireNumber();
        hired = true;
    }

    public void release() {
        log.debug("release() called");

        hireNumber = 0;
        hireEnd = null;
        hired = false;
    }
}
